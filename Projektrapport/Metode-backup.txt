\chapter{Metode}

Måden hvorpå dette projekt startede, var ved at en masse viden omkring emnet blev indsamlet. Her blev der ikke taget hensyn til nogen specifik metode. Der blev allerede i løbet af de første uger udarbejdet nogle løsningsforslag til hvorledes det endelige produkt skulle se ud. 

Da første review nærmede sig, blev der startet på \textbf{UML-} og \textbf{SysML-diagrammer}. En foreløbig systemarkitektur blev udarbejdet, således at teamet havde samme udgangspunkt i det videre forløb. Det var her nødvendigt at definere nogle krav til projektet. Her blev \textbf{usecases} benyttet til at definere de funktionelle krav, mens \textbf{FURPS+ og MoSCoW} blev benyttet til at definere de ikke-funktionelle krav. Usecasene blev udviklet ud fra et systemniveau, hvilket skulle vise sig at give udfordringer senere i forløbet.
Yderligere blev der udarbejdet \textbf{systemsekvensdiagrammer} som skulle vise hvorledes systemet interagere. Da gruppen består af hardware og software specialister var dette en nødvendighed, således at alle havde en fælles forståelse for produktet.

Der opstod flere udfordringer da der skulle udarbejdes en \textbf{domænemodel} til produktet. Domænemodellen bør udarbejdes med udgangspunkt i usecasene, og da usecasene var lavet på systemniveau, gav det ikke et særlig godt udgangspunkt for en domænemodel. Da der allerede i startfasen var researchet en del omkring produktet, og for hvilke muligheder der var for produceringen af produktet, blev det besluttet at domænemodellen ikke var nødvendig. Derfor blev den udarbejdede domænemodel også udeladt i projektet.
 
For at definere hvilket software der skulle allokeres hvor, blev der lavet et \textbf{softwareallokeringsdiagram}. Denne blev brugt til at skabe bro mellem hardware og software.

Hardwaren blev beskrevet med \textbf{BDD’er og IBD’er}. BDD’et er brugt til at nedbryde systemet i blokke, således at man hurtig kan danne sig et overblik over hvilke fysiske elementer,systemet består af. 
IBD’erne er brugt til at beskrive de interne grænseflader der er i systemet. Altså ind- og udgangsportene som er på de forskellige dele af produktet.

Til beskrivelsen af softwarearkitekturen blev der konstrueret \textbf{klasse- og sekvensdiagrammer}. Klassediagrammerne skulle vise hvilke klasser systemet består af, mens sekvensdiagrammerne skal vise hvilke metoder der skal være i hvilke klasser. Det var dog problematisk at skulle producere klasse og sekvensdiagrammer for brugergrænsefladen, da brugergrænsefladen blev udarbejdet i programmet QT. QT opretter egne metoder, og da der ikke var opnået nok erfaring med QT, til at kunne bestemme hvilke metoder der skulle bruges, blev det besluttet at dette først skulle gøres efter, at brugergrænsefladen var færdiglavet.
